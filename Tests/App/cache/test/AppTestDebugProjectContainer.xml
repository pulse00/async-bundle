<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/var/www/src/Dubture/Async/Tests/App</parameter>
    <parameter key="kernel.environment">test</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">App</parameter>
    <parameter key="kernel.cache_dir">/var/www/src/Dubture/Async/Tests/App/cache/test</parameter>
    <parameter key="kernel.logs_dir">/var/www/src/Dubture/Async/Tests/App/logs</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="MonologBundle">Symfony\Bundle\MonologBundle\MonologBundle</parameter>
      <parameter key="DubtureAsyncBundle">Dubture\AsyncBundle\DubtureAsyncBundle</parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">AppTestDebugProjectContainer</parameter>
    <parameter key="controller_resolver.class">Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver</parameter>
    <parameter key="controller_name_converter.class">Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser</parameter>
    <parameter key="response_listener.class">Symfony\Component\HttpKernel\EventListener\ResponseListener</parameter>
    <parameter key="streamed_response_listener.class">Symfony\Component\HttpKernel\EventListener\StreamedResponseListener</parameter>
    <parameter key="locale_listener.class">Symfony\Component\HttpKernel\EventListener\LocaleListener</parameter>
    <parameter key="event_dispatcher.class">Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher</parameter>
    <parameter key="http_kernel.class">Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel</parameter>
    <parameter key="filesystem.class">Symfony\Component\Filesystem\Filesystem</parameter>
    <parameter key="cache_warmer.class">Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate</parameter>
    <parameter key="cache_clearer.class">Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer</parameter>
    <parameter key="file_locator.class">Symfony\Component\HttpKernel\Config\FileLocator</parameter>
    <parameter key="uri_signer.class">Symfony\Component\HttpKernel\UriSigner</parameter>
    <parameter key="request_stack.class">Symfony\Component\HttpFoundation\RequestStack</parameter>
    <parameter key="fragment.handler.class">Symfony\Component\HttpKernel\Fragment\FragmentHandler</parameter>
    <parameter key="fragment.renderer.inline.class">Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer</parameter>
    <parameter key="fragment.renderer.hinclude.class">Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.renderer.esi.class">Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="translator.class">Symfony\Bundle\FrameworkBundle\Translation\Translator</parameter>
    <parameter key="translator.identity.class">Symfony\Component\Translation\IdentityTranslator</parameter>
    <parameter key="translator.selector.class">Symfony\Component\Translation\MessageSelector</parameter>
    <parameter key="translation.loader.php.class">Symfony\Component\Translation\Loader\PhpFileLoader</parameter>
    <parameter key="translation.loader.yml.class">Symfony\Component\Translation\Loader\YamlFileLoader</parameter>
    <parameter key="translation.loader.xliff.class">Symfony\Component\Translation\Loader\XliffFileLoader</parameter>
    <parameter key="translation.loader.po.class">Symfony\Component\Translation\Loader\PoFileLoader</parameter>
    <parameter key="translation.loader.mo.class">Symfony\Component\Translation\Loader\MoFileLoader</parameter>
    <parameter key="translation.loader.qt.class">Symfony\Component\Translation\Loader\QtFileLoader</parameter>
    <parameter key="translation.loader.csv.class">Symfony\Component\Translation\Loader\CsvFileLoader</parameter>
    <parameter key="translation.loader.res.class">Symfony\Component\Translation\Loader\IcuResFileLoader</parameter>
    <parameter key="translation.loader.dat.class">Symfony\Component\Translation\Loader\IcuDatFileLoader</parameter>
    <parameter key="translation.loader.ini.class">Symfony\Component\Translation\Loader\IniFileLoader</parameter>
    <parameter key="translation.loader.json.class">Symfony\Component\Translation\Loader\JsonFileLoader</parameter>
    <parameter key="translation.dumper.php.class">Symfony\Component\Translation\Dumper\PhpFileDumper</parameter>
    <parameter key="translation.dumper.xliff.class">Symfony\Component\Translation\Dumper\XliffFileDumper</parameter>
    <parameter key="translation.dumper.po.class">Symfony\Component\Translation\Dumper\PoFileDumper</parameter>
    <parameter key="translation.dumper.mo.class">Symfony\Component\Translation\Dumper\MoFileDumper</parameter>
    <parameter key="translation.dumper.yml.class">Symfony\Component\Translation\Dumper\YamlFileDumper</parameter>
    <parameter key="translation.dumper.qt.class">Symfony\Component\Translation\Dumper\QtFileDumper</parameter>
    <parameter key="translation.dumper.csv.class">Symfony\Component\Translation\Dumper\CsvFileDumper</parameter>
    <parameter key="translation.dumper.ini.class">Symfony\Component\Translation\Dumper\IniFileDumper</parameter>
    <parameter key="translation.dumper.json.class">Symfony\Component\Translation\Dumper\JsonFileDumper</parameter>
    <parameter key="translation.dumper.res.class">Symfony\Component\Translation\Dumper\IcuResFileDumper</parameter>
    <parameter key="translation.extractor.php.class">Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor</parameter>
    <parameter key="translation.loader.class">Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader</parameter>
    <parameter key="translation.extractor.class">Symfony\Component\Translation\Extractor\ChainExtractor</parameter>
    <parameter key="translation.writer.class">Symfony\Component\Translation\Writer\TranslationWriter</parameter>
    <parameter key="property_accessor.class">Symfony\Component\PropertyAccess\PropertyAccessor</parameter>
    <parameter key="kernel.secret">secret</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.trusted_proxies" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="test.client.class">Symfony\Bundle\FrameworkBundle\Client</parameter>
    <parameter key="test.client.parameters" type="collection"/>
    <parameter key="test.client.history.class">Symfony\Component\BrowserKit\History</parameter>
    <parameter key="test.client.cookiejar.class">Symfony\Component\BrowserKit\CookieJar</parameter>
    <parameter key="test.session.listener.class">Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener</parameter>
    <parameter key="security.secure_random.class">Symfony\Component\Security\Core\Util\SecureRandom</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="annotations.reader.class">Doctrine\Common\Annotations\AnnotationReader</parameter>
    <parameter key="annotations.cached_reader.class">Doctrine\Common\Annotations\CachedReader</parameter>
    <parameter key="annotations.file_cache_reader.class">Doctrine\Common\Annotations\FileCacheReader</parameter>
    <parameter key="debug.debug_handlers_listener.class">Symfony\Component\HttpKernel\EventListener\DebugHandlersListener</parameter>
    <parameter key="debug.stopwatch.class">Symfony\Component\Stopwatch\Stopwatch</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.event_dispatcher.class">Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher</parameter>
    <parameter key="debug.container.dump">/var/www/src/Dubture/Async/Tests/App/cache/test/AppTestDebugProjectContainer.xml</parameter>
    <parameter key="debug.controller_resolver.class">Symfony\Component\HttpKernel\Controller\TraceableControllerResolver</parameter>
    <parameter key="monolog.logger.class">Symfony\Bridge\Monolog\Logger</parameter>
    <parameter key="monolog.gelf.publisher.class">Gelf\MessagePublisher</parameter>
    <parameter key="monolog.gelfphp.publisher.class">Gelf\Publisher</parameter>
    <parameter key="monolog.handler.stream.class">Monolog\Handler\StreamHandler</parameter>
    <parameter key="monolog.handler.console.class">Symfony\Bridge\Monolog\Handler\ConsoleHandler</parameter>
    <parameter key="monolog.handler.group.class">Monolog\Handler\GroupHandler</parameter>
    <parameter key="monolog.handler.buffer.class">Monolog\Handler\BufferHandler</parameter>
    <parameter key="monolog.handler.rotating_file.class">Monolog\Handler\RotatingFileHandler</parameter>
    <parameter key="monolog.handler.syslog.class">Monolog\Handler\SyslogHandler</parameter>
    <parameter key="monolog.handler.syslogudp.class">Monolog\Handler\SyslogUdpHandler</parameter>
    <parameter key="monolog.handler.null.class">Monolog\Handler\NullHandler</parameter>
    <parameter key="monolog.handler.test.class">Monolog\Handler\TestHandler</parameter>
    <parameter key="monolog.handler.gelf.class">Monolog\Handler\GelfHandler</parameter>
    <parameter key="monolog.handler.rollbar.class">Monolog\Handler\RollbarHandler</parameter>
    <parameter key="monolog.handler.flowdock.class">Monolog\Handler\FlowdockHandler</parameter>
    <parameter key="monolog.handler.browser_console.class">Monolog\Handler\BrowserConsoleHandler</parameter>
    <parameter key="monolog.handler.firephp.class">Symfony\Bridge\Monolog\Handler\FirePHPHandler</parameter>
    <parameter key="monolog.handler.chromephp.class">Symfony\Bridge\Monolog\Handler\ChromePhpHandler</parameter>
    <parameter key="monolog.handler.debug.class">Symfony\Bridge\Monolog\Handler\DebugHandler</parameter>
    <parameter key="monolog.handler.swift_mailer.class">Symfony\Bridge\Monolog\Handler\SwiftMailerHandler</parameter>
    <parameter key="monolog.handler.native_mailer.class">Monolog\Handler\NativeMailerHandler</parameter>
    <parameter key="monolog.handler.socket.class">Monolog\Handler\SocketHandler</parameter>
    <parameter key="monolog.handler.pushover.class">Monolog\Handler\PushoverHandler</parameter>
    <parameter key="monolog.handler.raven.class">Monolog\Handler\RavenHandler</parameter>
    <parameter key="monolog.handler.newrelic.class">Monolog\Handler\NewRelicHandler</parameter>
    <parameter key="monolog.handler.hipchat.class">Monolog\Handler\HipChatHandler</parameter>
    <parameter key="monolog.handler.slack.class">Monolog\Handler\SlackHandler</parameter>
    <parameter key="monolog.handler.cube.class">Monolog\Handler\CubeHandler</parameter>
    <parameter key="monolog.handler.amqp.class">Monolog\Handler\AmqpHandler</parameter>
    <parameter key="monolog.handler.error_log.class">Monolog\Handler\ErrorLogHandler</parameter>
    <parameter key="monolog.handler.loggly.class">Monolog\Handler\LogglyHandler</parameter>
    <parameter key="monolog.handler.logentries.class">Monolog\Handler\LogEntriesHandler</parameter>
    <parameter key="monolog.handler.whatfailuregroup.class">Monolog\Handler\WhatFailureGroupHandler</parameter>
    <parameter key="monolog.activation_strategy.not_found.class">Symfony\Bundle\MonologBundle\NotFoundActivationStrategy</parameter>
    <parameter key="monolog.handler.fingers_crossed.class">Monolog\Handler\FingersCrossedHandler</parameter>
    <parameter key="monolog.handler.fingers_crossed.error_level_activation_strategy.class">Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy</parameter>
    <parameter key="monolog.handler.filter.class">Monolog\Handler\FilterHandler</parameter>
    <parameter key="monolog.handler.mongo.class">Monolog\Handler\MongoDBHandler</parameter>
    <parameter key="monolog.mongo.client.class">MongoClient</parameter>
    <parameter key="monolog.handler.elasticsearch.class">Monolog\Handler\ElasticSearchHandler</parameter>
    <parameter key="monolog.elastica.client.class">Elastica\Client</parameter>
    <parameter key="monolog.swift_mailer.handlers" type="collection"/>
    <parameter key="monolog.handlers_to_channels" type="collection">
      <parameter key="monolog.handler.main">null</parameter>
    </parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="test_service" class="TestService"/>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <argument>en</argument>
      <argument>null</argument>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="translator_listener" class="Symfony\Component\HttpKernel\EventListener\TranslatorListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="translator"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel">
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack"/>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate">
      <argument type="collection"/>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="collection"/>
    </service>
    <service id="request" scope="request" synthetic="true" synchronized="true"/>
    <service id="service_container" synthetic="true"/>
    <service id="kernel" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
      <argument>/var/www/src/Dubture/Async/Tests/App/Resources</argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner">
      <argument>secret</argument>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\Fragment\FragmentHandler">
      <argument type="collection"/>
      <argument>true</argument>
      <argument type="service" id="request_stack"/>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.inline"/>
      </call>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.hinclude"/>
      </call>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.esi"/>
      </call>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.ssi"/>
      </call>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.hinclude" class="Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="uri_signer"/>
      <argument></argument>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.esi" class="Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument>null</argument>
      <argument type="service" id="fragment.renderer.inline"/>
      <argument type="service" id="uri_signer"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.ssi" class="Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument>null</argument>
      <argument type="service" id="fragment.renderer.inline"/>
      <argument type="service" id="uri_signer"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="translator.default" class="Symfony\Bundle\FrameworkBundle\Translation\Translator">
      <argument type="service" id="service_container"/>
      <argument type="service" id="translator.selector"/>
      <argument type="collection">
        <argument key="translation.loader.php" type="collection">
          <argument>php</argument>
        </argument>
        <argument key="translation.loader.yml" type="collection">
          <argument>yml</argument>
        </argument>
        <argument key="translation.loader.xliff" type="collection">
          <argument>xlf</argument>
          <argument>xliff</argument>
        </argument>
        <argument key="translation.loader.po" type="collection">
          <argument>po</argument>
        </argument>
        <argument key="translation.loader.mo" type="collection">
          <argument>mo</argument>
        </argument>
        <argument key="translation.loader.qt" type="collection">
          <argument>ts</argument>
        </argument>
        <argument key="translation.loader.csv" type="collection">
          <argument>csv</argument>
        </argument>
        <argument key="translation.loader.res" type="collection">
          <argument>res</argument>
        </argument>
        <argument key="translation.loader.dat" type="collection">
          <argument>dat</argument>
        </argument>
        <argument key="translation.loader.ini" type="collection">
          <argument>ini</argument>
        </argument>
        <argument key="translation.loader.json" type="collection">
          <argument>json</argument>
        </argument>
      </argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/src/Dubture/Async/Tests/App/cache/test/translations</argument>
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="translator" class="Symfony\Component\Translation\IdentityTranslator">
      <argument type="service" id="translator.selector"/>
    </service>
    <service id="translator.selector" class="Symfony\Component\Translation\MessageSelector" public="false"/>
    <service id="translation.loader.php" class="Symfony\Component\Translation\Loader\PhpFileLoader">
      <tag name="translation.loader" alias="php"/>
    </service>
    <service id="translation.loader.yml" class="Symfony\Component\Translation\Loader\YamlFileLoader">
      <tag name="translation.loader" alias="yml"/>
    </service>
    <service id="translation.loader.xliff" class="Symfony\Component\Translation\Loader\XliffFileLoader">
      <tag name="translation.loader" alias="xlf" legacy_alias="xliff" legacy-alias="xliff"/>
    </service>
    <service id="translation.loader.po" class="Symfony\Component\Translation\Loader\PoFileLoader">
      <tag name="translation.loader" alias="po"/>
    </service>
    <service id="translation.loader.mo" class="Symfony\Component\Translation\Loader\MoFileLoader">
      <tag name="translation.loader" alias="mo"/>
    </service>
    <service id="translation.loader.qt" class="Symfony\Component\Translation\Loader\QtFileLoader">
      <tag name="translation.loader" alias="ts"/>
    </service>
    <service id="translation.loader.csv" class="Symfony\Component\Translation\Loader\CsvFileLoader">
      <tag name="translation.loader" alias="csv"/>
    </service>
    <service id="translation.loader.res" class="Symfony\Component\Translation\Loader\IcuResFileLoader">
      <tag name="translation.loader" alias="res"/>
    </service>
    <service id="translation.loader.dat" class="Symfony\Component\Translation\Loader\IcuDatFileLoader">
      <tag name="translation.loader" alias="dat"/>
    </service>
    <service id="translation.loader.ini" class="Symfony\Component\Translation\Loader\IniFileLoader">
      <tag name="translation.loader" alias="ini"/>
    </service>
    <service id="translation.loader.json" class="Symfony\Component\Translation\Loader\JsonFileLoader">
      <tag name="translation.loader" alias="json"/>
    </service>
    <service id="translation.dumper.php" class="Symfony\Component\Translation\Dumper\PhpFileDumper">
      <tag name="translation.dumper" alias="php"/>
    </service>
    <service id="translation.dumper.xliff" class="Symfony\Component\Translation\Dumper\XliffFileDumper">
      <tag name="translation.dumper" alias="xlf"/>
    </service>
    <service id="translation.dumper.po" class="Symfony\Component\Translation\Dumper\PoFileDumper">
      <tag name="translation.dumper" alias="po"/>
    </service>
    <service id="translation.dumper.mo" class="Symfony\Component\Translation\Dumper\MoFileDumper">
      <tag name="translation.dumper" alias="mo"/>
    </service>
    <service id="translation.dumper.yml" class="Symfony\Component\Translation\Dumper\YamlFileDumper">
      <tag name="translation.dumper" alias="yml"/>
    </service>
    <service id="translation.dumper.qt" class="Symfony\Component\Translation\Dumper\QtFileDumper">
      <tag name="translation.dumper" alias="ts"/>
    </service>
    <service id="translation.dumper.csv" class="Symfony\Component\Translation\Dumper\CsvFileDumper">
      <tag name="translation.dumper" alias="csv"/>
    </service>
    <service id="translation.dumper.ini" class="Symfony\Component\Translation\Dumper\IniFileDumper">
      <tag name="translation.dumper" alias="ini"/>
    </service>
    <service id="translation.dumper.json" class="Symfony\Component\Translation\Dumper\JsonFileDumper">
      <tag name="translation.dumper" alias="json"/>
    </service>
    <service id="translation.dumper.res" class="Symfony\Component\Translation\Dumper\IcuResFileDumper">
      <tag name="translation.dumper" alias="res"/>
    </service>
    <service id="translation.extractor.php" class="Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor">
      <tag name="translation.extractor" alias="php"/>
    </service>
    <service id="translation.loader" class="Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader">
      <call method="addLoader">
        <argument>php</argument>
        <argument type="service" id="translation.loader.php"/>
      </call>
      <call method="addLoader">
        <argument>yml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>xlf</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>xliff</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>po</argument>
        <argument type="service" id="translation.loader.po"/>
      </call>
      <call method="addLoader">
        <argument>mo</argument>
        <argument type="service" id="translation.loader.mo"/>
      </call>
      <call method="addLoader">
        <argument>ts</argument>
        <argument type="service" id="translation.loader.qt"/>
      </call>
      <call method="addLoader">
        <argument>csv</argument>
        <argument type="service" id="translation.loader.csv"/>
      </call>
      <call method="addLoader">
        <argument>res</argument>
        <argument type="service" id="translation.loader.res"/>
      </call>
      <call method="addLoader">
        <argument>dat</argument>
        <argument type="service" id="translation.loader.dat"/>
      </call>
      <call method="addLoader">
        <argument>ini</argument>
        <argument type="service" id="translation.loader.ini"/>
      </call>
      <call method="addLoader">
        <argument>json</argument>
        <argument type="service" id="translation.loader.json"/>
      </call>
    </service>
    <service id="translation.extractor" class="Symfony\Component\Translation\Extractor\ChainExtractor">
      <call method="addExtractor">
        <argument>php</argument>
        <argument type="service" id="translation.extractor.php"/>
      </call>
    </service>
    <service id="translation.writer" class="Symfony\Component\Translation\Writer\TranslationWriter">
      <call method="addDumper">
        <argument>php</argument>
        <argument type="service" id="translation.dumper.php"/>
      </call>
      <call method="addDumper">
        <argument>xlf</argument>
        <argument type="service" id="translation.dumper.xliff"/>
      </call>
      <call method="addDumper">
        <argument>po</argument>
        <argument type="service" id="translation.dumper.po"/>
      </call>
      <call method="addDumper">
        <argument>mo</argument>
        <argument type="service" id="translation.dumper.mo"/>
      </call>
      <call method="addDumper">
        <argument>yml</argument>
        <argument type="service" id="translation.dumper.yml"/>
      </call>
      <call method="addDumper">
        <argument>ts</argument>
        <argument type="service" id="translation.dumper.qt"/>
      </call>
      <call method="addDumper">
        <argument>csv</argument>
        <argument type="service" id="translation.dumper.csv"/>
      </call>
      <call method="addDumper">
        <argument>ini</argument>
        <argument type="service" id="translation.dumper.ini"/>
      </call>
      <call method="addDumper">
        <argument>json</argument>
        <argument type="service" id="translation.dumper.json"/>
      </call>
      <call method="addDumper">
        <argument>res</argument>
        <argument type="service" id="translation.dumper.res"/>
      </call>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor">
      <argument>false</argument>
      <argument>false</argument>
    </service>
    <service id="test.client" class="Symfony\Bundle\FrameworkBundle\Client" scope="prototype">
      <argument type="service" id="kernel"/>
      <argument type="collection"/>
      <argument type="service">
        <service class="Symfony\Component\BrowserKit\History" scope="prototype"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\BrowserKit\CookieJar" scope="prototype"/>
      </argument>
    </service>
    <service id="test.client.history" class="Symfony\Component\BrowserKit\History" scope="prototype"/>
    <service id="test.client.cookiejar" class="Symfony\Component\BrowserKit\CookieJar" scope="prototype"/>
    <service id="test.session.listener" class="Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="security.secure_random" class="Symfony\Component\Security\Core\Util\SecureRandom">
      <tag name="monolog.logger" channel="security"/>
      <argument>/var/www/src/Dubture/Async/Tests/App/cache/test/secure_random.seed</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="ignore"/>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <argument></argument>
      <argument type="service" id="monolog.logger.php" on-invalid="null"/>
      <argument></argument>
      <argument>null</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch"/>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher">
      <tag name="monolog.logger" channel="event"/>
      <argument type="service">
        <service class="Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher" public="false">
          <argument type="service" id="service_container"/>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="monolog.logger.event" on-invalid="null"/>
      <call method="addSubscriberService">
        <argument>response_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\ResponseListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>streamed_response_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\StreamedResponseListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>locale_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\LocaleListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>translator_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\TranslatorListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>test.session.listener</argument>
        <argument>Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>debug.debug_handlers_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\DebugHandlersListener</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver">
      <argument type="service">
        <service class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
          <tag name="monolog.logger" channel="request"/>
          <argument type="service" id="service_container"/>
          <argument type="service">
            <service class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
              <tag name="monolog.logger" channel="request"/>
              <argument type="service" id="kernel"/>
            </service>
          </argument>
          <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="monolog.handler.main" class="Monolog\Handler\FingersCrossedHandler">
      <argument type="service" id="monolog.handler.nested"/>
      <argument>400</argument>
      <argument>0</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="monolog.handler.nested" class="Monolog\Handler\StreamHandler">
      <argument>/var/www/src/Dubture/Async/Tests/App/logs/test.log</argument>
      <argument>100</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="dubture.async.interceptor" class="Dubture\AsyncBundle\Interceptor\AsyncInterceptor">
      <argument type="service" id="annotation_reader"/>
      <argument type="service" id="dubture.async.backend.runtime"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="dubture_async_bundle.pointcut.asyncpointcut" class="Dubture\AsyncBundle\Pointcut\AsyncPointcut">
      <tag name="jms_aop.pointcut" interceptor="dubture.async.interceptor"/>
      <argument type="service" id="annotation_reader"/>
    </service>
    <service id="dubture.async.backend.runtime" class="Dubture\AsyncBundle\Backend\RuntimeBackend">
      <argument type="service" id="service_container"/>
    </service>
    <service id="monolog.logger.request" class="Symfony\Bridge\Monolog\Logger">
      <argument>request</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.translation" class="Symfony\Bridge\Monolog\Logger">
      <argument>translation</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.security" class="Symfony\Bridge\Monolog\Logger">
      <argument>security</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.php" class="Symfony\Bridge\Monolog\Logger">
      <argument>php</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.event" class="Symfony\Bridge\Monolog\Logger">
      <argument>event</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="annotation_reader" class="Doctrine\Common\Annotations\FileCacheReader">
      <argument type="service">
        <service class="Doctrine\Common\Annotations\AnnotationReader" public="false"/>
      </argument>
      <argument>/var/www/src/Dubture/Async/Tests/App/cache/test/annotations</argument>
      <argument>true</argument>
    </service>
    <service id="logger" class="Symfony\Bridge\Monolog\Logger">
      <argument>app</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="event_dispatcher" alias="debug.event_dispatcher"/>
  </services>
</container>
